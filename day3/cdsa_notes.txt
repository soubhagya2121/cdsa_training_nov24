CDSA and Problem solving training (10 days) City Engg College, Blr

DAY1 MONDAY 04-11-2024

Git commands:
git status  # 
git add .
git commit -m "relavent msg"
git push origin main
---------------------------------------------
'A0'
'A' and '0'

'A' has ASCII value of 65 01000001
'0' has ASCII value of 48 00110000


0 to 15

39
0010 0111

39
00000000 00100111

-18
18
0001 0010
1110 1101
        1
1110 1110
-1*2(7) + 1*2(6) + 1*2(5) + 14
-1*128 + 64 + 32 + 14
= -128 + 110
= -18

-128 to +127 (signed one byte)
1000 0000
-1*2(7) 0
= -128

0111 1111
= 127

1100 0000
1*2(7) + 1*2(6)
= 128 + 64
= 192

0 to 255 (unsigned one byte)

PPLs have a issue of data binding, and structuring the code in heirarchical design.
Thus, PP strategy creates the issues like Tight coupling
Difficult to create very big applications.

OOP came as the answer for the above issues.
IN OOP, we have the concepts like
A Abstraction	To hide the implementations make the user easy to use.
E Encapsulation	Better way of data and method binding (Access specifiers)	
I Inheritance	Better way of reusing the existing solutions
P Polymorphism	Applying modifications to the existing solution is easy

C++ was the 1st successful OOPL built on C
C++ = C + OOc
C++ is an increment to C

But C++ was not so high level and it was not machine independent language.

Java came as a better alternative to C++
More high level (Abstractions on Pointers, operator overloading, no global data, no hybrid inheritance)
Exception handling
By default multi threaded
Machine independent
Plug-ins can be easily created with help of Interfaces

CLASS-2 SUNDAY, 1ST MARCH 2020

STRUCTURE OF C PROGRAM
#include
other pre processors
struct union and enum definitions 
function declarations / prototype
function definitions / solution / instructions / business logic


The very existance use of programming and even a Computer for that matter, is 
DATA. So at the core of programming is DATA.
Data must be given at most priority.
There are different kind of data.
e.g. Numeric, alphabetic, alphanumeric, audio, image, video etc.
DATA-TYPE	"Type of the data"
Data types available in C are:
Numeric: int, float, double
alpha, alphanumeric: char, string
We also have manipulators
The 2 basic numeric data types:
int			4 bytes
double		8 bytes
Every data in memory of the computer has a fixed size (in terms of bytes)

float (half of double)	4 bytes (to store precision along with number)
Manipulators:
1. which changes the size
	short	can be applied only to int (so  short int   is 2 bytes)
	long	can be applied to int and double
So long int is 4 bytes,  long long int is 8 bytes and int is 4 bytes

2. which changes the sign
	signed		to store -ve or +ve numbers
	unsigned	to store only +ve numbers
Note: All variables by default are signed.

char		to store one ASCII character
char[]		to store a string (a word, or gorup of words) " "

LOOPS
for 			0 or N times (where N value is known)
while			0 or X times (Where X is unknown value)
do-while		1 or X times (Where X is unknown value)

CONDITIONAL
if		else	switch	case	default		break	continue	return
if(confition)
  then fo this.
  
if(confition)
	do this;
else
	do this;

if(c)
	if(c)
	
if(c1)
   if(c2)
     do this
   else if(3)
     do this
   else
     do this
else
   do this
   
if(finalYear)
   allow;
else if(pre )
     if(aggre > 70)
	    allow
else
    do not allow;
	
1. Check if a number is positive
2. Check if a number is Even
3. Check if a number is Even or Odd
4. Check if a character is upper case 
5. Check if a number is Perfect Square
6. Check if a person is eligible to vote on age basis
7. Check if a year is Leap year
8. Check if an alphabet is a Vowel
9. Check if a character is a digit or alphabet or a symbol
10. Check if a number is divisible by 5
11. Check if a number is 2 digit number
12. Find smallest of 2 numbers
13. Find biggest of 2 distinct numbers
14. Find smallest of 3 distinct numbers
---------------------------------------------------
Ralational Operators:
< > <= >= == !=
All are binary oprs
I/P are numbers
O/P is boolean
Left to right associtivity
Has lesser precedence than arithmetic orps
Used with Infix notation

for i = 1; i <= 10; i++
for i = 1; i < 11; i++

[10, 20] closed interval
(30, 45) open interval
[10, 30) Right Open

for i = 10; i <= 20; i++
for i = 31; i < 45; i++
for i = 10; i < 30; i++

SRP

i++;
j--;
a[i] = b[j];
b[j]--;

a[++i] = b[--j]--; // Never code this kind of bulky stmts
----------------------------------------------
Logical Operators
&& || ! & |

C1  C2  XandY  XorY
F   F     F     F
F   H

// Check if a number is Even
#include <stdio.h>
int main()
{
    short int inputNumber = 0;
    puts("Enter a number to check if it is Even");
    scanf("%d", &inputNumber);
    if (inputNumber % 2 == 0)
        printf("%d is an Even number", inputNumber);
    return 0;
}
-----------------------------------------
// Check if a number is Even or not.
#include <stdio.h>
int main()
{
    short int inputNumber = 0;
    puts("Enter a number to check if it is Even");
    scanf("%d", &inputNumber);
    if (inputNumber % 2 == 0)
        printf("%d is an Even number", inputNumber);
    else
        printf("%d is not an Even number", inputNumber);
    return 0;
}
--------------------------------------
// Check if a number is Even or Odd
#include <stdio.h>
int main()
{
    short int inputNumber = 0;
    puts("Enter a number to check if it is Even");
    scanf("%d", &inputNumber);
    if (inputNumber % 2 == 0)
        printf("%d is an Even number", inputNumber);
    else
        printf("%d is an Odd number", inputNumber);
    return 0;
}
---------------------------------------------------
Write a program to print the result of the student by taking the average score.
0  - 49 Fail
50 - 74 Second class
74 - 90 FC
91 - 100 D
Also check if the input is invalid

#include <stdio.h>
int main()
{
    int averageScore = 0;
    puts("Enter average score of the student to print result");
    scanf("%d", &averageScore);
    if (averageScore >= 0 && averageScore <= 49)
        puts("Fail");
    else if (averageScore <= 74)
        puts("Second Class");
    else if (averageScore <= 90)
        puts("First Class");
    else if (averageScore <= 100)
        puts("Distinction");
    else
        puts("Invalid Input");
}
-----------------------------------------------
Print the Math table of a number for multiples upto 20

#include <stdio.h>
int main()
{
    int inputNumber = 0;
    puts("Enter  number to print its Math table");
    scanf("%d", &inputNumber);
    for (int i = 1; i <= 20; i++)
    {
        printf("%2d * %02d = %03d \n", inputNumber, i, inputNumber * i);
    }
}
// 18 * 1 = 18
---------------------------------------------------
Find the smallest digit in a number.
Find the number of Even digits in a number.
Find sum of digits in a number.
Find the 2nd smallest digit in a number.
9. Accept a number and find sum of digits of the number
10.Accept a number and find count the number of digits in it.
11.Accept a number and find biggest/smallest digit in the number
12.Find sum of Even/Odd digits in the number
13.Find the frequency of a digit in the number

14.Find sum of Odd placed Even digits in the number
15.Find 2nd smallest digit in the number
16.Accept a number from user and find her lucky digit, where the lucky digit is found by finding sum of the digits of the number until a sigle digit number is reached. Thus if the sum is not a single digit number, apply the logic of finding sum of the digits on it.
17. Find sum of Odd placed Even digits.

HOW TO SOLVE A PROBLEM

1. Understand the problem. Recognise the required data (I/P). Isolate/remove the unwanted information and data. Focus on the relevant information. Accertain what should be the O/P.
Outcome: We know the I/P, O/P and the relevant information

2. Build the solution using trial and error technique or mathematical formula or using a specific Algorithm. In this step we must not even think of programming.
OutCome: We know the what is the solution(s)

3. Write the Algorithm. Every step of the algorithm must be simple, unambigious and finite.
OutCome: We have a clear visible solution as a procedure

4. Write the Fake-code (Pseudocode) 
OutCome: You have a solution that looks like a code

5. Code it (via the languiage syntax)

6. Good coding practices, naming standards, documentation, unit-testing

7. Efficiency of algorithms, Optimization, development, DEvOps, Cyber Security, Installation, Maintainance
-------------------------------------------------
i/p: +ve integer  3457
o/P: sum of digits of the number 19
info: i/p num is +ve int

We find that, getting the left most digit is impossible until unless we know the number of digits in the number.

However, we can get the unit place digit from any number by dividing it by 10 and getting the remainder

10) 3457 (345
	3450
	   7
Thus, when we divide a number by 10 and do integer division (quotient is always int), as if we seperate/pluck/copy the remainder digit from the given number.

Now we also observe that the quotient has not got the remainder digit.

Thus, repeat the process on the quotient every time until we get Zero.


1. Read N
2. sumOfDigits = 0
3. while N > 0 do:
	 remainderDigit = N % 10 // copy the last digit
	 N = N / 10 // remove the last digit from N
	 sumOfDigits = sumOfDigits + remainderDigit
4. print sumOfDigits as O/P

N = 679
s = 0
while 679 > 0   // i=1
	r = 679 % 10 = 9
	N = 679 / 10 = 67
	s = 0 + 9 = 9
while 67 > 0   // i=2
	r = 67 % 10 = 7
	N = 67 / 10 = 6
	s = 9 + 7 = 16
while 6 > 0    // i=3
	r = 6 % 10 = 6
	N = 6 / 10 = 0
	s = 16 + 6 = 22
while 0 > 0  // i=4 There is no 4th iteration

int main() {
	int inputNumber = 0, remainderDigit = 0, sumOfDigits = 0, tempNumber = 0;
	puts("Enter a number (+ve integer) to find sum of its digits");
	scanf("%d", &inputNumber);
	tempNumber = inputNumber;
	while(inputNumber > 0) {
		remainderDigit = inputNumber % 10;
		sumOfDigits += remainderDigit;
		inputNumber = inputNumber / 10;
	}
	printf("Sum of digits of %d is %d", tempNumber, sumOfDigits);
	return 0;
}
---------------------------------------------
DAY3 WEDNESDAY 06-11-2024

int num = 35;
int age = 35;
int personAge = 35;

int studentAge = 35;

Object:
int studentAge = 35;
int minAge = 18;
int maxAge = 80;
string unit = "years";

18
80
-------------------------------------------------------------
int biscuitPrices[10];

myFunction(biscuitPrices, 10);

#include <stdio.h>
int main()
{
    int x = -4, y = 1, z = 9;
    if (y >= --x || x != ++z)
    {
        puts("Mysuru");
    }
    else
    {
        puts("Bengaluru");
    }
    printf("%d  %d  %d", x, y, z); // -5 1 9   -3 1 9
}
----------------------------------------
#include <stdio.h>
int main()
{
    int x = -4, y = 1, z = 9;
    x++;
    printf("%d  %d  %d \n", x, y, z); // -3 1 9
    ++x;
    printf("%d  %d  %d \n", x, y, z); // -2 1 9
    y = z--;
    printf("%d  %d  %d \n", x, y, z); // -2 9 8
    z = ++x;
    printf("%d  %d  %d \n", x, y, z); // -1 9 -1
    x = y++ - ++y;
    //  9   - 11
    printf("%d  %d  %d \n", x, y, z); // -2 11 -1
}
-----------------------------------------------
#include <stdio.h>
int main()
{
    int x = 11, y = 3, z = 19;
    if (z-- >= --x | y++ == x && z != y)
        puts("Sarakki");
    else
        puts("Silk Board");
    printf("%d  %d  %d \n", x, y, z); // 10 4 18
}
---------------------------------------
#include <stdio.h>
int main()
{
    int choice = 0;
    puts("Welcome to Madurai Cafe");
    puts("1:Banne-Dosa 2:Upma 3:Rava-idli \nYour choice? ");
    scanf("%d", &choice);
    switch (choice)
    {
    case 1:
        puts("Your Tasty dosa Sir");
        break;
    case 2:
        puts("Your yummy upma Maam");
        break;
    case 3:
        puts("Your delicious idli Sir");
        break;
    default:
        puts("This is not garden Sir");
    }
    puts("Thank you Visit again");
    return 0;
}
------------------------------
Check if a number is Prime
Print the Prime numbers between m and n (m < n)
Print the Nth Prime number

Print the Nth term of the series: 1 2 2 3 3 5 5 7 8 11 13 13
Odd terms:  1   2   3   5   8   13 (N/2+1)th term
Even Terms: 2   3   5   7   11  13 n/2th term

Print Fibo series of N terms
Print Nth Fibo term
Check if a number is Prime
Find Nth Prime number


   

